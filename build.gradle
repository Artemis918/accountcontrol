plugins {
  id "java"
  id "eclipse"
  id "org.springframework.boot" version "3.5.0"
  id "io.spring.dependency-management" version "1.1.7"
  id "com.github.node-gradle.node" version "7.1.0"
}

repositories {
  mavenCentral()
}


dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'org.springframework.boot:spring-boot-devtools'
  implementation 'org.springframework.boot:spring-boot-starter-jetty'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.liquibase:liquibase-core:4.33.0'
  implementation 'org.postgresql:postgresql'
  implementation 'com.opencsv:opencsv:5.9'
  implementation 'org.jdom:jdom2:2.0.6.1'
  implementation 'com.google.code.gson:gson:2.13.1'
  runtimeOnly 'com.h2database:h2:2.3.232'

  testImplementation 'org.mockito:mockito-junit-jupiter'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.13.4'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.13.4'
  testImplementation 'com.h2database:h2:2.3.232'
}

test {
  systemProperty 'spring.profiles.active', 'test'
  useJUnitPlatform()
}

node {
  distBaseUrl = 'https://nodejs.org/dist'
  download = true
}

bootRun {
  systemProperty 'spring.profiles.active', 'dev'
}

task webpack(type: com.github.gradle.node.npm.task.NpmTask, dependsOn: 'npmInstall') {
  args = ['run', 'build']
  inputs.dir("src/main/js")
  outputs.dir("${buildDir}/js")
}

processResources.dependsOn webpack

processResources {
  from("${buildDir}/js") {
    include "**/*.js"
    into "static"
  }
}

clean.delete << file('src/main/webapp/dist')

task copyDockerJar(type: Copy) {
  dependsOn bootJar
  from "$buildDir/libs/${rootProject.name}-${version}.jar"
  into "$buildDir/docker"
}

eclipse {
  classpath {
    plusConfigurations += [configurations.compileClasspath]
    file {
      whenMerged {
        def jsSrc = new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/main/js', null)
        if (!entries.contains(jsSrc)) {
          entries.add(jsSrc)
        }
      }
    }
  }
}

// createContainer {
//   #dependsOn "build"
//   #cp build/libs/accountcontrol.jar docker
//   #docker build -t gitlab.balsen.loc:4901/balsen/accountcontrol/accountcontrol:latest docker
//   #docker push gitlab.balsen.loc:4901/balsen/accountcontrol/accountcontrol:latest
// }
